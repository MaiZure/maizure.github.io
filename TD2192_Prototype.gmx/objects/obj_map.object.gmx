<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set references
gamedata = instance_find(obj_currentgame,0)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
new_surface = true
map_width=201
map_height=201

draw_mode = 1 /* 0 = slowest (not using VRAM), 1 = fastest (using too much VRAM) */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create data structures
mapdata = ds_grid_create(map_width,map_height)
collision_map = ds_grid_create(map_height,map_height)
map_surface = 0

if draw_mode == 1
    map_surface = surface_create(map_width*32,map_height*32)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load map data
var file, map_char;

if gamedata.current_mission = 0 then
    file = file_text_open_read("INTRO.MP2")
else if gamedata.current_mission &lt; 20
    file = file_text_open_read("TD.MP2")
else if gamedata.current_mission &lt; 40
    file = file_text_open_read("TD2.MP2")
else if gamedata.current_mission &lt; 60
    file = file_text_open_read("TD3.MP2")

/* read map in column major */
for (var rx=0;rx&lt;map_width;rx++)
{
    for (var ry=0;ry&lt;map_height;ry++)
    {    
        map_char = file_text_read_string(file)            
        ds_grid_set(mapdata,rx,ry,ord(map_char)-$20)
        switch ord(map_char)-$20
        {
            case $0F:
            case $10:
            case $31:
            case $32:
            case $33:
            case $38:
            case $39:
            case $45:
            case $3B:
            case $3C:
            case $3D: ds_grid_set(collision_map,rx,ry,0); break
            default: ds_grid_set(collision_map,rx,ry,1); break;
        }
        file_text_readln(file)
    }
}
file_text_close(file)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free data structures
ds_grid_destroy(mapdata)
ds_grid_destroy(collision_map)
surface_free(map_surface)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ensure destruction
instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw entire map each frame (slowest)
if draw_mode == 0
{
    var xx, yy, img;
    
    for (yy=0;yy&lt;map_width;yy++)
    {
        for (xx=0;xx&lt;map_height;xx++)
        {
            img = ds_grid_get(mapdata,xx,yy)
            draw_sprite(BLK1,img,xx*32,yy*32)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw map from VRAM surface (fastest, but memory hog)
if draw_mode == 1
{
    if !surface_exists(map_surface)
        new_surface = true
        
    if (new_surface)
    {
        surface_set_target(map_surface)
        draw_set_alpha(1)
        var xx, yy, img;
    
        for (yy=0;yy&lt;map_width;yy++)
        {
            for (xx=0;xx&lt;map_height;xx++)
            {
                img = ds_grid_get(mapdata,xx,yy)
                draw_sprite(BLK1,img,xx*32,yy*32)
            }
        }
        surface_reset_target()
        new_surface = false
    }
    draw_set_alpha(1)
    draw_surface(map_surface,0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
