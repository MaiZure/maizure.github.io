<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI enums
enum AIMODE
{
    inactive,
    move,
    path_seek,
    hunt,
    fire,
    finished
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Vars
mode = AIMODE.move
mission_complete = false /* Did the AI complete their mission */
next_path_position=0

/** Later **/
ai_timer = irandom_range(1,30)

/* Ship IDs */
agent = 0 /* ship AI is attached to */
player_ship = 0
target = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path Structures Init

/* Fixed paths from mission file */
for (var i=0;i&lt;500;i++)
{
    fixed_path_x[i]=-1
    fixed_path_y[i]=-1
}

/** Later **/

astar_goal_x = 0
astar_goal_y = 0
astar_frontier_pq = ds_priority_create() /* Reachable, but not checked */
astar_closed_list = ds_list_create() /* Nodes already checked */
astar_relation_map = ds_map_create() /* Holds checked nodes and their parent */
astar_cost_map = ds_map_create() /* Holds lookup of cost values for frontier */
astar_path_stack = ds_stack_create()  /* A* Output - remaining path */

/* Next waypoint (popped from A* stack) */
ai_next_x = -1
ai_next_y = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI Mode Select
if mode != AIMODE.inactive
{
    if ai_timer &gt; 0
        ai_timer--
        
    if agent &gt; 0 &amp;&amp; !agent.is_player
    {
        if ai_timer &lt; 1 then
        {
            switch agent.ship_type
            {
                case SHIPTYPE.hornet:
                case SHIPTYPE.stiletto:
                case SHIPTYPE.stingray:
                case SHIPTYPE.vi:
                case SHIPTYPE.vii:
                case SHIPTYPE.viii:
                {
                    //Hunt or Move
                    if mode == AIMODE.hunt &amp;&amp; !instance_exists(target)
                    {
                        ds_stack_clear(astar_path_stack)
                        mode = AIMODE.path_seek
                    }
                    if mode == AIMODE.move || mode == AIMODE.path_seek
                    {
                        var potential_target = find_closest_opponent()
                        if instance_exists(potential_target)
                        {
                            if point_distance(agent.x,agent.y,potential_target.x,potential_target.y) &lt; 30*32
                            {
                                ds_stack_clear(astar_path_stack)
                                target = potential_target
                                mode = AIMODE.hunt
                            }
                        }
                    }
                }
            }
            ai_timer+=irandom_range(45,75)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hunt AI Update
if mode == AIMODE.hunt &amp;&amp; instance_exists(target)
{
    //need new calc
    if ds_stack_empty(astar_path_stack)
        ai_astar(agent.map_x,agent.map_y,target.map_x,target.map_y,10)

    var diff_map_x = ai_next_x - agent.map_x;
    var diff_map_y = ai_next_y - agent.map_y;
    
    //at waypoint, get next
    if diff_map_x == 0 &amp;&amp; diff_map_y == 0
    {   
        if ds_stack_empty(astar_path_stack) //At the goal - do something else
            ai_astar(agent.map_x,agent.map_y,target.map_x+irandom_range(-12,12),target.map_y+irandom_range(-12,12),12)
        else
        {
            var next_waypoint = ds_stack_pop(astar_path_stack)
            ai_next_x = id_to_map_x(next_waypoint)
            ai_next_y = id_to_map_y(next_waypoint)
        }
    }
    
    if diff_map_x &gt; 0 then ds_stack_push(agent.command_stack,"ai_right")
    if diff_map_x &lt; 0 then ds_stack_push(agent.command_stack,"ai_left")
    if diff_map_y &lt; 0 then ds_stack_push(agent.command_stack,"ai_up")
    if diff_map_y &gt; 0 then ds_stack_push(agent.command_stack,"ai_down")
    
    //Fire
    if agent.fire_delay &lt; 1 then
    {
        if abs(angle_difference(agent.direction,point_direction(agent.x,agent.y,target.x,target.y))) &lt; 20
        {
            if point_distance(agent.x,agent.y,target.x,target.y) &lt; 16*32
                ds_stack_push(agent.command_stack,"ai_fire")
        }
    }
    
    //reverse turn
    if abs(angle_difference(agent.direction,point_direction(agent.x,agent.y,target.x,target.y))) &gt; 160
        ds_stack_push(agent.command_stack,choose("ai_up","ai_left","ai_right","ai_down"))
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path seek AI
if mode == AIMODE.path_seek
{   
    //need new calc
    if ds_stack_empty(astar_path_stack)
        ai_astar(agent.map_x,agent.map_y,fixed_path_x[next_path_position],fixed_path_y[next_path_position],24)

    var diff_map_x = ai_next_x - agent.map_x;
    var diff_map_y = ai_next_y - agent.map_y;
    
    //at waypoint, get next
    if diff_map_x == 0 &amp;&amp; diff_map_y == 0
    {   
        if ds_stack_empty(astar_path_stack) //At the goal - do something else
            ai_astar(agent.map_x,agent.map_y,fixed_path_x[next_path_position],fixed_path_y[next_path_position],12)
        else
        {
            var next_waypoint = ds_stack_pop(astar_path_stack)
            ai_next_x = id_to_map_x(next_waypoint)
            ai_next_y = id_to_map_y(next_waypoint)
        }
    }
    
    if diff_map_x &gt; 0 then ds_stack_push(agent.command_stack,"ai_right")
    if diff_map_x &lt; 0 then ds_stack_push(agent.command_stack,"ai_left")
    if diff_map_y &lt; 0 then ds_stack_push(agent.command_stack,"ai_up")
    if diff_map_y &gt; 0 then ds_stack_push(agent.command_stack,"ai_down")
    
    if abs(agent.map_x-fixed_path_x[next_path_position])+ abs(agent.map_y-fixed_path_y[next_path_position]) &lt; 3
        mode = AIMODE.move
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move AI Update
if mode = AIMODE.move
{
    var diff_map_x = fixed_path_x[next_path_position] - agent.map_x;
    var diff_map_y = fixed_path_y[next_path_position] - agent.map_y;

    if diff_map_x &gt; 0 then ds_stack_push(agent.command_stack,"ai_right")
    if diff_map_x &lt; 0 then ds_stack_push(agent.command_stack,"ai_left")
    if diff_map_y &lt; 0 then ds_stack_push(agent.command_stack,"ai_up")
    if diff_map_y &gt; 0 then ds_stack_push(agent.command_stack,"ai_down")
    
    if diff_map_x == 0 &amp;&amp; diff_map_y == 0
        next_path_position++
        
    if fixed_path_x[next_path_position] &lt;= 0 &amp;&amp; fixed_path_y[next_path_position] &lt;= 0
        mode = AIMODE.finished

}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Finished AI Update
if mode == AIMODE.finished
{
    mission_complete = true
    with agent
        instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Test AI
if agent &gt; 0 &amp;&amp; agent.is_player
{
    if ai_next_x == agent.map_x &amp;&amp; ai_next_y == agent.map_y
    {
        if !ds_stack_empty(astar_path_stack)
        {
            var next_pos = ds_stack_pop(astar_path_stack)
            ai_next_x = id_to_map_x(next_pos)
            ai_next_y = id_to_map_y(next_pos)
        }
    }
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set references
map = instance_find(obj_map,0)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Init
if agent.is_player 
    mode = AIMODE.inactive

player_ship = find_player_ship()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Path debug
/*
if ai_next_x &gt; 0 &amp;&amp; ai_next_y &gt; 0 then
{
    draw_set_color(c_yellow)
    draw_circle(ai_next_x*32+16,ai_next_y*32+16,16,false)
}*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Target debug
/*
if mode == AIMODE.hunt &amp;&amp; instance_exists(target)
{
    draw_set_color(c_fuchsia)
    draw_line_width(agent.x,agent.y,target.x,target.y,3)
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transport debug
/*
if instance_exists(agent)
{
    var wp_x = fixed_path_x[next_path_position]*32;
    var wp_y = fixed_path_y[next_path_position]*32;
    draw_set_color(c_lime)
    draw_line_width(agent.x,agent.y,wp_x,wp_y,5)
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug A*
/*
if agent &gt; 0 &amp;&amp; mode=AIMODE.inactive
    ai_astar(agent.map_x, agent.map_y,16,16,24)
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
