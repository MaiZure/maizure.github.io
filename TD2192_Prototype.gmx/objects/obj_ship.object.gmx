<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SHP</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set References
keyboard_register(id)
map = instance_find(obj_map,0) 
mission = instance_find(obj_hq,0) /* comment out initially */
hud = instance_find(obj_hud,0) /* comment out initially */
ai = 0 /* deferred */
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Data Structures
targets_pq = ds_priority_create()


//HUD targets box /* dont include initially */
for (var i=0;i&lt;8;i++)
    targets_box[i]=0


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ship enums
enum ACTION
{
           wait = 0,
             up = 1 &lt;&lt; 0,
          right = 1 &lt;&lt; 1,
           down = 1 &lt;&lt; 2,
           left = 1 &lt;&lt; 3,
    fire_weapon = 1 &lt;&lt; 4,
  change_weapon = 1 &lt;&lt; 5,
    afterburner = 1 &lt;&lt; 6,
  self_destruct = 1 &lt;&lt; 7
};

enum WEAPON
{
    none,
    gun_weak,
    gun_normal,
    gun_strong,
    missile_weak,
    missile_normal,
    missile_strong
};

enum SHIPTYPE
{
    truck,
    transport,
    stiletto,
    stingray,
    hornet,
    javelin,
    viii,
    vi,
    vii
};

enum ALIGNMENT
{
    ally,
    neutral,
    enemy
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Vars

shields_max = 100
shields = shields_max
armor_max = 100
armor = armor_max
speed_max = 5
has_afterburner = false
alignment = ALIGNMENT.neutral


actions = 0
active = true
ship_index = 0
wave_number = 1

dir_to = 0
turn_delay = 0
fire_delay = 0
last_hit = 0

is_player = false //True for initial testing
ship_type = SHIPTYPE.hornet

x = 3450
y = 3500
map_x = map_pos(x)
map_y = map_pos(y)

/* derived variables */
weapon[0]=WEAPON.gun_normal
weapon[1]=WEAPON.missile_normal
missile_count = 4
active_weapon = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Release AI
/* Not in first pass */
ai.agent = 0
ai.mode = AIMODE.inactive
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make explosions
/* Leave blank */
if armor &lt; 1 then
{
    instance_create(x,y,obj_explosion)
    instance_create(x+32,y+32,obj_explosion)
    instance_create(x-32,y+32,obj_explosion)
    instance_create(x+32,y-32,obj_explosion)
    instance_create(x-32,y-32,obj_explosion)
    instance_create(x,y,obj_flash)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free data structures
keyboard_deregister(id)
ds_priority_destroy(targets_pq)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check mission flags
/* not in first pass */

mission.update_mission = true

if last_hit == find_player_ship()
    mission.player_kills+=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Minimap point delayed update draw
map_x = map_pos(x)
map_y = map_pos(y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer, Shields, Position and 'physics' updates
if turn_delay &gt; 0
    turn_delay--
    
if fire_delay &gt; 0
    fire_delay--
    
speed *= 0.95
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Target Positions
if is_player
{
    ds_priority_clear(targets_pq)
    
    for (var i=0;i&lt;8;i++)
        targets_box[i]=0
        
    for (var i=0; i&lt;=instance_number(obj_ship);i++)
    {
        if i &lt; instance_number(obj_ship) 
        {
            var tgt = instance_find(obj_ship,i);
            var value = 1
        }
        else
        {
            var tgt = instance_find(obj_hq,0)
            var value = 32
        }
        
        if tgt != id &amp;&amp; tgt.visible == true
        {
            var dir = point_direction(x,y,tgt.x,tgt.y)
            var dist = point_distance(x,y,tgt.x,tgt.y) 
            
            /* Skip if check initially - just add */
                //if tgt.object_index == obj_ship
            if ds_list_find_index(mission.target_list,tgt) &gt; -1 then            
                ds_priority_add(targets_pq,tgt,dist)
            
            if dir &gt; 340 || dir &lt;= 25 then
                targets_box[0]+=value
            if dir &gt; 25 &amp;&amp; dir &lt;= 70 then
                targets_box[1]+=value
            if dir &gt; 70 &amp;&amp; dir &lt;= 115 then
                targets_box[2]+=value
            if dir &gt; 115 &amp;&amp; dir &lt;= 160 then
                targets_box[3]+=value
            if dir &gt; 160 &amp;&amp; dir &lt;= 205 then
                targets_box[4]+=value
            if dir &gt; 205 &amp;&amp; dir &lt;= 250 then
                targets_box[5]+=value
            if dir &gt; 250 &amp;&amp; dir &lt;= 295 then
                targets_box[6]+=value
            if dir &gt; 295 &amp;&amp; dir &lt;= 340 then
                targets_box[7]+=value
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Input
actions = 0

while !ds_stack_empty(command_stack)
{
    var cmd = ds_stack_pop(command_stack);
    
    if active
    {
        /* Player-only commands */
        if is_player 
        {
            switch cmd
            {
                case "hold_up": actions |= ACTION.up; break;
                case "hold_down": actions |= ACTION.down; break;
                case "hold_left": actions |= ACTION.left; break;
                case "hold_right": actions |= ACTION.right; break;
                case "fire": actions |= ACTION.fire_weapon; break;
                case "tab": actions |= ACTION.change_weapon; break;
                case "escape": actions |= ACTION.self_destruct; break;
            }
        }
        else   
        {        
            switch cmd
            {
                case "ai_up": actions |= ACTION.up; break;
                case "ai_down": actions |= ACTION.down; break;
                case "ai_left": actions |= ACTION.left; break;
                case "ai_right": actions |= ACTION.right; break;
                case "ai_fire": actions |= ACTION.fire_weapon; break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Move Turn Commands

/* find intended direction */
if ACTION.up == (actions &amp; ACTION.up) then dir_to = 90
if ACTION.right == (actions &amp; ACTION.right) then dir_to = 0
if ACTION.down == (actions &amp; ACTION.down) then dir_to = 270
if ACTION.left == (actions &amp; ACTION.left) then dir_to = 180

if (ACTION.up | ACTION.right) == (actions &amp; (ACTION.up | ACTION.right))
    dir_to = 45

if (ACTION.up | ACTION.left) == (actions &amp; (ACTION.up | ACTION.left))
    dir_to = 135

if (ACTION.down | ACTION.left) == (actions &amp; (ACTION.down | ACTION.left))
    dir_to = 225

if (ACTION.down | ACTION.right) == (actions &amp; (ACTION.down | ACTION.right))
    dir_to = 315    

var dir_diff = angle_difference(direction, dir_to)

/* Turn if necessary */
if dir_diff &lt; 0 &amp;&amp; dir_diff &gt; -180
{
    if turn_delay &lt; 1
    {
        direction+=45
        turn_delay = 6
    }
}
    
if dir_diff &gt; 0 &amp;&amp; dir_diff &lt; 180
{
    if turn_delay &lt; 1
    {
        direction-=45
        turn_delay = 6
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Move Speed
if actions &amp; (ACTION.up | ACTION.right | ACTION.left | ACTION.down)
{
    if (direction - dir_to) mod 180 == 0
    {
        if dir_to == direction
            speed+=1
        else
            speed-=1
    }
    
    speed = clamp(speed,-speed_max,speed_max)
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute fire commands
if (actions &amp; ACTION.fire_weapon)
{
    if fire_delay &lt; 1 then
    {
        switch weapon[active_weapon]
        {
            case WEAPON.gun_weak:
            {            
                fire_shot(1, WEAPON.gun_weak)
                fire_shot(2, WEAPON.gun_weak)
                fire_shot(3, WEAPON.gun_weak)
                fire_shot(4, WEAPON.gun_weak)
                                
                fire_delay = 10
                if !is_player then fire_delay+=irandom_range(20,40)
                
                audio_stop_sound(snd_hornetfire)
                audio_play_sound(snd_hornetfire,0,false)
            } break;
            
            case WEAPON.gun_normal:
            {            
                fire_shot(1, WEAPON.gun_normal)
                fire_shot(2, WEAPON.gun_normal)
                
                fire_delay = 8
                if !is_player then fire_delay+=irandom_range(20,40)
                
                audio_stop_sound(snd_hornetfire)
                audio_play_sound(snd_hornetfire,0,false)
            } break;
            
            case WEAPON.missile_normal:
            {            
                if missile_count &gt; 0 then
                {
                    fire_shot(0, WEAPON.missile_normal)
                    
                    fire_delay = 20
                    if !is_player then fire_delay+=irandom_range(20,40)
                    
                    audio_stop_sound(snd_missilefire)
                    audio_play_sound(snd_missilefire,0,false)
                                        
                    missile_count--
                }
            } break;
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute other Commands
if actions &amp; (ACTION.change_weapon)
    active_weapon = ++active_weapon mod 2
    
if actions &amp; (ACTION.self_destruct)
    armor = 0
    
/* if actions &amp; (ACTION.afterburner) */



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Check
var front_x = x+lengthdir_x(16,direction)
var front_y = y+lengthdir_y(16,direction)
    
var back_x = x+lengthdir_x(-16,direction)
var back_y = y+lengthdir_y(-16,direction)

if ds_grid_get(map.collision_map,map_pos(back_x),map_pos(back_y)) &gt; 0
    speed = abs(speed)

if ds_grid_get(map.collision_map,map_pos(front_x),map_pos(front_y)) &gt; 0
    speed = -abs(speed)
 
/* Edge barrier */   
if is_player
{
    if (map_pos(back_x) &lt; 10 || map_pos(back_x) &gt; 190 || map_pos(back_y) &lt; 10 || map_pos(back_y) &gt; 190) then
    {
        speed = abs(speed)
        hud.message = "Stay in your jurisdiction, velasquez"
    }

    if (map_pos(front_x) &lt; 10 || map_pos(front_x) &gt; 190 || map_pos(front_y) &lt; 10 || map_pos(front_y) &gt; 190) then
    {
        speed = -abs(speed)
        hud.message = "Stay in your jurisdiction, velasquez"
    }
}
    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shields &amp; Death check
if shields &lt; shields_max
{
    shields += 10
    if shields &gt; shields_max
        shields = shields_max
}

if armor &lt;= 0
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set derived variables (Polymorph)

switch ship_type
{
    case SHIPTYPE.truck:
    {
        armor_max=3200
        shields_max=0
        speed_max= 76/24
        weapon[0]=WEAPON.none
        weapon[1]=WEAPON.none
        missile_count = 0
        alignment=ALIGNMENT.enemy
    } break;
    case SHIPTYPE.transport:
    {
        armor_max=2400
        shields_max=0
        speed_max= 115/24
        weapon[0]=WEAPON.none
        weapon[1]=WEAPON.none
        missile_count = 0
        alignment=ALIGNMENT.neutral
    } break;
    case SHIPTYPE.stiletto:
    {
        armor_max=1500
        shields_max=1800
        speed_max= 316/24
        weapon[0]=WEAPON.gun_weak
        weapon[1]=WEAPON.missile_weak
        missile_count = 8
        has_afterburner = true
        alignment=ALIGNMENT.ally
    } break;
    case SHIPTYPE.stingray:
    {
        armor_max=1500
        shields_max=1800
        speed_max= 125/24
        weapon[0]=WEAPON.gun_weak
        weapon[1]=WEAPON.missile_normal
        missile_count = 4
        alignment=ALIGNMENT.ally
    } break;
    case SHIPTYPE.hornet:
    {
        armor_max=1500
        shields_max=1800
        speed_max= 120/24
        weapon[0]=WEAPON.gun_normal
        weapon[1]=WEAPON.missile_normal
        missile_count = 4
        alignment=ALIGNMENT.ally
    } break;
    case SHIPTYPE.javelin:
    {
        armor_max=1500
        shields_max=1600
        speed_max= 125/24
        weapon[0]=WEAPON.gun_normal
        weapon[1]=WEAPON.missile_normal
        missile_count = 12
        afterburner=true
        alignment=ALIGNMENT.ally        
    } break;
    case SHIPTYPE.viii:
    {
        armor_max=4000
        shields_max=3500
        speed_max= 90/24
        weapon[0]=WEAPON.gun_strong
        weapon[1]=WEAPON.missile_strong
        missile_count = 4
        alignment=ALIGNMENT.enemy
    } break;
    case SHIPTYPE.vi:
    {
        armor_max=2500
        shields_max=2500
        speed_max= 118/24
        weapon[0]=WEAPON.gun_normal
        weapon[1]=WEAPON.missile_normal
        missile_count = 4
        alignment=ALIGNMENT.enemy
    } break;
    case SHIPTYPE.vii:
    {
        armor_max=2000
        shields_max=2500
        speed_max= 185/24
        weapon[0]=WEAPON.gun_weak
        weapon[1]=WEAPON.missile_weak
        missile_count = 4
        alignment=ALIGNMENT.enemy
    } break;
    
}

armor = armor_max
shields = shields_max
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render ship
draw_sprite_ext(SHP,ship_type,x,y,1,1,direction,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render Pointer
if is_player
{
    if mission.mission_complete == true /* mission complete - draw point to base */
    {
        var tgt = instance_find(obj_hq,0)
        if instance_exists(tgt)
        {
            var tgt_dir = point_direction(x,y,tgt.x,tgt.y)
            var start_x = x+lengthdir_x(24,tgt_dir)
            var start_y = y+lengthdir_y(24,tgt_dir)
            var end_x = x+lengthdir_x(32,tgt_dir)
            var end_y = y+lengthdir_y(32,tgt_dir)
            
            draw_set_color(c_black)
            draw_line_width(start_x-1,start_y+1,end_x-1,end_y+1,2)
            draw_line_width_colour(start_x,start_y,end_x,end_y,2,c_black,c_aqua)
        }
    }
    else
    {
        if !ds_priority_empty(targets_pq)
        {
            var tgt = ds_priority_find_min(targets_pq)
            if instance_exists(tgt)
            {
                var tgt_dir = point_direction(x,y,tgt.x,tgt.y)
                var start_x = x+lengthdir_x(24,tgt_dir)
                var start_y = y+lengthdir_y(24,tgt_dir)
                var end_x = x+lengthdir_x(32,tgt_dir)
                var end_y = y+lengthdir_y(32,tgt_dir)
                var col;
                if tgt.alignment = ALIGNMENT.enemy then col = c_red
                if tgt.alignment = ALIGNMENT.ally then col = c_lime
                if tgt.alignment = ALIGNMENT.neutral then col = c_blue
                
                draw_set_color(c_black)
                draw_line_width(start_x-1,start_y+1,end_x-1,end_y+1,2)
                draw_line_width_colour(start_x,start_y,end_x,end_y,2,c_black,col)
            }
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render minimap overlay
/*add later during hud process */
if map_x &gt; hud.map_min_x &amp;&amp; map_x &lt; hud.map_max_x &amp;&amp; map_y &gt; hud.map_min_y &amp;&amp; map_y &lt; hud.map_max_y
{
    var col = c_red
    if alignment = ALIGNMENT.ally then col = c_lime
    if alignment = ALIGNMENT.neutral then col = c_aqua
    
    surface_set_target(hud.minimap_overlay)
    draw_set_color(col)
    draw_set_alpha(1)
    draw_point(map_x,map_y)
    surface_reset_target()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
