<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Register with keyboard handler
keyboard_register(id)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Def state enum
enum INTRO
{
    inactive,
    read,
    swap,
    screen_in,
    text_in,
    listen,
    text_out,
    screen_out
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Vars
intro_state = INTRO.read

event_list = ds_list_create() /* Hold event actions from markup file */
event_list_pos = 0

screen_alpha = 0
text_alpha = 0

current_text=""
current_screen=-1
current_color=-1
current_pos_x=-1
current_pos_y=-1
current_align=-1

next_text=""
next_screen=-1
next_color=-1
next_pos_x=-1
next_pos_y=-1
next_align=fa_left
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read Event Script File
file = file_text_open_read("introscene.txt")

while (!file_text_eof(file))
{
    ds_list_add(event_list,file_text_read_string(file))
    file_text_readln(file);
}

file_text_close(file)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove references &amp; free data structures
keyboard_deregister(id)
ds_list_destroy(event_list)

room_goto(rm_mainmenu)


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process input
if !ds_stack_empty(command_stack)
{
    var cmd = ds_stack_pop(command_stack);
    
    if intro_state = INTRO.listen
    {
        switch cmd
        {
            case "any": intro_state = INTRO.text_out; break;
            case "escape": instance_destroy(); break
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update State
switch intro_state
{

    /* interpret intro script */
    case INTRO.read:
    {
        var line = ds_list_find_value(event_list,event_list_pos);
        var first_char = string_char_at(line,1)
        
        /* script line is a command */
        if first_char == "[" then
        {
            var operator = string_char_at(line,2)
            var operand = string_copy(line,3,string_length(line))

            switch operator
            {
                /* set background screen */
                case "s": next_screen = operand; break;
                
                /* set text color */
                case "c": 
                {
                    switch operand
                    {
                        case "red": next_color = c_red; break;
                        case "black": next_color = c_black; break;
                        case "aqua": next_color = c_aqua; break;
                    }
                }; break;
                
                /* set text vertical position */
                case "v": 
                {
                    switch operand
                    {
                        case "bottom": next_pos_y = round(view_hview[0] * 0.9); break;
                        case "mid": next_pos_y = round(view_hview[0] * 0.45); break;
                        case "top": next_pos_y = round(view_hview[0] * 0.1); break;
                    }
                } break;
                
                /* set text horizontal alignment */
                case "h":
                {
                    switch operand
                    {
                        case "left": next_align = fa_left; break;
                        case "center":
                        case "mid": next_align = fa_center; break
                    }   
                } break;
                
                /* spawn other object and put self to sleep while it operates */
                case "o":
                {
                    var new_object = operand
                    intro_state = INTRO.inactive
                    instance_create(0,0,asset_get_index(new_object))                    
                } break;
                
                /* end scene */
                case "e": instance_destroy();
            }   
        }
        else /* script line must be display text */
        {
            next_text = string_upper(line)
            intro_state = INTRO.swap
        }
        
        event_list_pos+=1
        
    } break;
    
    /* copy buffered state to active state */
    case INTRO.swap:
    {   
        /* swap values if relevent */ 
        if next_text != "" then current_text = next_text
        if next_screen != -1 then current_screen = asset_get_index(next_screen)
        if next_color != -1 then current_color = next_color
        if next_align != -1 then current_align = next_align
        if next_pos_x != -1 then current_pos_x = next_pos_x
        if next_pos_y != -1 then current_pos_y = next_pos_y
        
        /* clear data buffer */
        next_text=""
        next_screen=-1
        next_color=-1
        next_pos_x=-1
        next_pos_y=-1
        next_align=-1
        
        /* Center alignment position is based on current text width -
           not known until this point */
        if current_align == fa_center then
            current_pos_x = max(view_wview[0]/2 - (string_width(current_text)/2),view_wview[0]*0.05)
        else
            current_pos_x = round(view_wview[0] * 0.05)
        
        intro_state = INTRO.screen_in
        
    } break;
    
    /* screen fade in */
    case INTRO.screen_in:
    {
        if screen_alpha &lt; 1 then
            screen_alpha+=0.05
        else
            intro_state = INTRO.text_in
    } break;
    
    /* text fade in */
    case INTRO.text_in:
    {
        if text_alpha &lt; 1 then
            text_alpha+=0.05
        else
            intro_state = INTRO.listen
    } break;
    
    /* text fade out */
    case INTRO.text_out:
    {
        if text_alpha &gt; 0 then
            text_alpha-=0.05
        else
        {
            var peek = ds_list_find_value(event_list,event_list_pos)
            
            /* check for new screen next or just new text */
            if string_char_at(peek,1) == "["
                intro_state = INTRO.screen_out
            else
                intro_state = INTRO.read
        }
    } break;
    
    /* screen fade out */
    case INTRO.screen_out:
    {
        if screen_alpha &gt; 0 then
            screen_alpha-=0.05
        else
            intro_state = INTRO.read
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render screen
if current_screen &gt; -1
    draw_sprite_ext(current_screen,0,0,0,1,1,0,c_white,screen_alpha)
    
if intro_state != INTRO.read || intro_state != INTRO.inactive
{
    draw_set_color(current_color)
    draw_set_alpha(text_alpha)
    draw_set_font(global.little_font)
    
    var line_width = round(view_wview[0]*0.9)
    var line_height = round(sprite_get_height(LT2)*1.5)
    
    draw_text_ext_transformed(current_pos_x,current_pos_y,current_text,line_height,line_width,1,1,0)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
