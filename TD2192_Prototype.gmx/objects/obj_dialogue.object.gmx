<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Register keyboard and set references
keyboard_register(id)

gamedata = instance_find(obj_currentgame,0)
brief = instance_find(obj_briefing,0)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dialogue States Enum
enum DIALOGUE
{
    reading,
    writing,
    waiting,
    fin
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init vars
scene_alpha = 1
dialogue_state = DIALOGUE.reading

current_scene = 0 /* dialogue index passed from obj_brief on create*/
current_line = 0 /* current line of scene (runtime computed) */

/* variables for scene elements */
face_left = 0 /* sprite index */
face_right = 1 /* sprite index */
name_left = ""
name_right = ""
code_left = 0
code_right = 0
color_left = c_aqua
color_right = c_lime
active_face= 1 /* 1 = left, 2 = right */

/* Text buffer line variables */
line_height = sprite_get_height(LT2)*1.5
line_char_pos = 1
current_line_end = 0
current_line_full = ""
current_line_disp = ""

/* Make text display buffer */
for (var i=0;i&lt;=10;i++)
{
    display_text_buffer[i] = ""
    display_color_buffer[i] = c_black
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free data structures
keyboard_deregister(id)
//ds_list_destroy(dialogue_data)
//ds_list_destroy(dialogue_index)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return control
briefing_next()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fading In
if dialogue_state != DIALOGUE.fin
{
    if scene_alpha &gt; 0 then
        scene_alpha -= 0.05
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State management
switch dialogue_state
{
    case DIALOGUE.reading: /* Read and process a single event */
    {
        var line, line_len, first_char, second_char; 
        
        line = ds_list_find_value(brief.dialogue_data,current_line);
        line_len = string_length(line);
        first_char = ord(string_char_at(line,1)) /* Primary action code */
        second_char = ord(string_char_at(line,2)) /* Secondary action code */
        
        switch first_char /* Read in first byte to determine action */
        {
            case $01: /* Setting up scene actors */
            {
                if second_char == 1 /* set left face info */
                {
                    face_left = face_escape(ord(string_char_at(line,3)))
                    code_left = ord(string_char_at(line,4))
                    name_left = string_upper(string_copy(line,5,line_len-4))
                }
                else /* set right face info */
                {
                    face_right = face_escape(ord(string_char_at(line,3)))
                    code_right = ord(string_char_at(line,4))
                    name_right = string_upper(string_copy(line,5,line_len-4))
                }
            } break;
            case $02: /* Setting up a text line */
            {   
                if ord(string_char_at(line,3)) == code_left
                {
                    active_face = 1
                    display_color_buffer[0] = color_left
                }
                
                if ord(string_char_at(line,3)) == code_right
                {
                    active_face = 2
                    display_color_buffer[0] = color_right
                }
                
                if line_len &lt; 5 then /* Blank line */
                        scroll_screen_text_buffer()
                else /* New Text Line */
                {
                    current_line_full = string_upper(string_copy(line,4,line_len-3))
                    current_line_end = string_length(current_line_full)
                    current_line_disp = ""
                    line_char_pos = 1
                    dialogue_state = DIALOGUE.writing
                }
            } break;
            
            case $05: dialogue_state = DIALOGUE.waiting; break;
            case $64: dialogue_state = DIALOGUE.fin; break;
        }          
        current_line+=1
    } break;
    
    case DIALOGUE.writing: /* Print the next character */
    {       
        if line_char_pos &lt;= current_line_end
        {            
            draw_set_font(global.little_font)
            
            /* Huge ugly spacing edge case man I hate parsers */
            if line_char_pos == 1 &amp;&amp; string_length(display_text_buffer[0]) &gt; 1
            {
                if string_char_at(display_text_buffer[0],string_length(display_text_buffer[0])) != " "
                    display_text_buffer[0]+=" "
            }
            
            /* Determine if we should start a new line */
            if string_char_at(current_line_full,line_char_pos) == " " &amp;&amp; string_width(display_text_buffer[0]) &gt; round(view_wview[0]*0.80) then
                scroll_screen_text_buffer()
            else /* Keep on printing */
            {
                display_text_buffer[0] += string_char_at(current_line_full,line_char_pos)
                line_char_pos+=1
            }
                
        }
        else
            dialogue_state = DIALOGUE.reading
    
    } break;
    
    case DIALOGUE.fin: /* Finish the dialogue */
    {
        if scene_alpha &lt; 1 then
            scene_alpha+=0.05
        else
            instance_destroy()
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process input
if ds_exists(command_stack,ds_type_stack) &amp;&amp; !ds_stack_empty(command_stack)
{
    var cmd = ds_stack_pop(command_stack);
    
    if dialogue_state = DIALOGUE.waiting
    {
        switch cmd
        {
            case "any": dialogue_state = DIALOGUE.reading; break;            
            case "escape": dialogue_state = DIALOGUE.fin; break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Render Scene
draw_set_font(global.little_font)
draw_set_halign(fa_left)
draw_set_alpha(1)

/* Draw text from bottom up */
for (var i=0;i&lt;=10;i++)
{
    draw_set_color(display_color_buffer[i])
    draw_text(view_wview[0]*0.03,round(view_hview[0]*0.93)-line_height*i,display_text_buffer[i])
}

/* Draw Faces */
draw_sprite(NEWFACE1_strip26,face_left,0,0)
draw_sprite(NEWFACE1_strip26,face_right,view_wview[0]/2,0)

/* Draw Names with shadows*/
draw_set_halign(fa_center)
draw_set_color(c_black)
draw_text(view_wview[0]/4-1,round(view_hview[0]*0.45)+1,name_left)
draw_text(view_wview[0]*3/4-1,round(view_hview[0]*0.45)+1,name_right)
draw_set_color(color_left)
draw_text(view_wview[0]/4-1,round(view_hview[0]*0.45),name_left)
draw_set_color(color_right)
draw_text(view_wview[0]*3/4,round(view_hview[0]*0.45),name_right)

/* Darken inactive face without direct alpha */
draw_set_alpha(0.4)
draw_set_color(c_black)
if active_face == 2
    draw_rectangle(0,0,view_wview[0]/2,view_hview[0]/2,false)
else
    draw_rectangle(view_wview[0]/2,0,view_wview[0],view_hview[0]/2,false)

/* Entire Scene Alpha */
draw_set_alpha(scene_alpha)
draw_rectangle(0,0,view_wview[0],view_hview[0],false)
draw_set_alpha(1)


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
