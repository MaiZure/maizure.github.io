<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
target_list = ds_list_create()
input_stack = ds_stack_create()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get keyboard input
if !ds_stack_empty(input_stack)
    ds_stack_clear(input_stack)

//Holds
if keyboard_check(vk_up) then ds_stack_push(input_stack, "hold_up")
if keyboard_check(vk_down) then ds_stack_push(input_stack, "hold_down")
if keyboard_check(vk_left) then ds_stack_push(input_stack, "hold_left")
if keyboard_check(vk_right) then ds_stack_push(input_stack, "hold_right")
if keyboard_check(vk_space) then ds_stack_push(input_stack, "fire")
    
//Presses    
if keyboard_check_pressed(vk_up) then ds_stack_push(input_stack, "push_up")
if keyboard_check_pressed(vk_down) then ds_stack_push(input_stack, "push_down")
if keyboard_check_pressed(vk_left) then ds_stack_push(input_stack, "push_left")
if keyboard_check_pressed(vk_right) then ds_stack_push(input_stack, "push_right")
if keyboard_check_pressed(ord('X')) then ds_stack_push(input_stack, "press_x")
if keyboard_check_pressed(ord('Z')) then ds_stack_push(input_stack, "press_z")
if keyboard_check_pressed(ord('Y')) then ds_stack_push(input_stack, "press_y")
if keyboard_check_pressed(ord('N')) then ds_stack_push(input_stack, "press_n")
if keyboard_check_pressed(ord('W')) then ds_stack_push(input_stack, "press_w")
if keyboard_check_pressed(vk_space) then ds_stack_push(input_stack, "space")
if keyboard_check_pressed(vk_escape) then ds_stack_push(input_stack, "escape")
if keyboard_check_pressed(vk_tab) then ds_stack_push(input_stack, "tab")
if keyboard_check_pressed(vk_anykey) then ds_stack_push(input_stack, "any")
if keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_return) then 
    ds_stack_push(input_stack, "enter")
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Distribute input to objects
while !ds_stack_empty(input_stack)
{
    var input = ds_stack_pop(input_stack)
    
    for (var i=0;i&lt;ds_list_size(target_list);i++)
    {
        inst = ds_list_find_value(target_list,i)
        ds_stack_push(inst.command_stack,input)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear registered instances
ds_list_clear(target_list)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
